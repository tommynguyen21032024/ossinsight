/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface QuerySchema {
  /**
   * Query name, default is generated base on the file path.
   */
  name?: string;
  /**
   * Specify how to implement caching, NORMAL_TABLE are used by default.
   */
  cacheProvider?: "NORMAL_TABLE" | "CACHED_TABLE";
  /**
   * Cache time in hours, -1 indicates that the query cache will not expire.
   */
  cacheHours: number;
  /**
   * Refresh cache time in hours, -1 indicates not to refresh.
   */
  refreshHours?: number;
  /**
   * Only return data from the cache.
   */
  onlyFromCache?: boolean;
  /**
   * Query params declaration.
   */
  params: Params[];
  /**
   * Special restrictions for params.
   */
  restrictions?: Restriction[];
}
export interface Params {
  /**
   * URL Search param name for the query.
   */
  name: string;
  /**
   * Define the parameter type.
   */
  type?: "array" | "date-range" | "collection";
  /**
   * Define the parameter corresponding column name.
   */
  column?: string;
  /**
   * Set in date-range should use that moment as `to` time.
   */
  dateRangeTo?: "now" | "last-valid-datetime";
  /**
   * Define substring in the query sql template. Replacing uses `String.replaceAll`, please make sure the replacing substring is not substring of other texts.
   */
  replaces: string;
  /**
   * Replacing templates, mapped by search value
   */
  template?: {
    [k: string]: string;
  };
  /**
   * Default input value.
   */
  default?: number | string;
  /**
   * Enums for prefetching and validating, default is no prefetching and validating.
   */
  enums?: string | string[];
  /**
   * Regular expression for validating parameter value.
   */
  pattern?: string;
}
export interface Restriction {
  fields: string[];
  enums: string[][];
}
