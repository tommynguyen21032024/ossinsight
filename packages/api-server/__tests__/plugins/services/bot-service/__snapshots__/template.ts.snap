// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prompt template generate chart prompt template should work 1`] = `
"# TypeScript
type Column = string;
interface Chart { title: string }
interface PieChart extends Chart { label: Column; value: Column }
interface LineChart extends Chart { x: Column; y: Column | Column[]; }
interface BarChart extends Chart  { x: Column; y: Column | Column[]; }
interface MapChart extends Chart  { country_code: Column; value: Column; }
interface NumberCard extends Chart  { label?: Column; value: Column; }
interface RepoCard extends Chart  { repo_name: Column; }
interface PersonalCard extends Chart  { user_login: Column; }
interface Table extends Chart  { columns: Column[]; }

If the result only has one number, use NumberCard
If the result has a column such as country_code, use MapChart
If the result has multiple number columns, use LineChart or BarChart
If the result has a time column and a number column, use LineChart
If the result is a numerical distribution, use BarChart
If the result has a percentage column, use PieChart
If the result is a repository or project list, use RepoCard
If the result is a user list, use PersonalCard
If not sure, use Table

actor_login is the user login of actor

# Example
Question: How many contributors in @pingcap/tidb
Data: [{"contributors": 378}]
Chart: {"chartName": "NumberCard", "title": "Number of Contributors in @pingcap/tidb", "value": "contributors"}

---
Let's think step by step, generate the chart option json for the following question and data.
Question: The commits and pushes in @pingcap/tidb across months
Data: [{"commits":671,"event_month":"2015-09-01","pushes":521},{"commits":561,"event_month":"2015-10-01","pushes":426},{"commits":546,"event_month":"2015-11-01","pushes":399},{"commits":478,"event_month":"2015-12-01","pushes":343}]
Chart: 
"
`;

exports[`prompt template sql playground prompt template should work 1`] = `
" MySQL SQL
Table github_events, columns = [id, type, created_at, repo_id, repo_name, actor_id, actor_login, additions, deletions, action, number, org_login, org_id, state, closed_at, comments, pr_merged_at, pr_merged, pr_changed_files, pr_review_comments, pr_or_issue_id, push_size, push_distinct_size, creator_user_login, creator_user_id, pr_or_issue_created_at]
- Column type, enums = ['PullRequestEvent', 'PushEvent', 'IssueCommentEvent', 'IssuesEvent', 'PullRequestReviewCommentEvent', 'WatchEvent', 'CreateEvent', 'DeleteEvent', 'ForkEvent', 'ReleaseEvent']
- Column action:
* type in [PullRequestReviewCommentEvent, IssueCommentEvent, ReviewEvent]: created
* type in [PullRequestEvent, IssuesEvent]: opened, closed, reopened
- Column number, number is issue number
- Column created_at, closed_at, pr_merged_at, pr_or_issue_created_at DEFAULT '1970-01-01 00:00:00'

# Rules
Select statement limit 20 by default, if question need more data, please add limit 200
Use column alias for all columns: SELECT ge.repo_name AS repo_name
use common table expression if and only if necessary

# Snippet
Trends across months: DATE_FORMAT(ge.created_at, '%Y-%m-01') AS t_month
Open to merged time: TIMESTAMPDIFF(SECOND, ge.pr_or_issue_created_at, ge.closed_at)
Exclude bots: actor_login NOT LIKE "%bot%"
When access github_events table, must add 'repo_id = {fill with repo_id!!!}' in WHERE
Star in 2022: WHERE ge.type = 'WatchEvent' AND ge.action = 'started' AND YEAR(ge.created_at) = 2022
Merged PR: type = 'PullRequestEvent' AND action = 'closed' AND pr_merged = 1
The number of PR: type = 'PullRequestEvent' AND action = 'opened'
Contributor: who opened pull request to the repo

# Context





# Example Template
-- A template for calculating trend by star history
SELECT DATE_FORMAT(ge.created_at, '%Y-%m-01') AS month, COUNT(*) AS stars FROM github_events ge WHERE ge.type = 'WatchEvent' AND ge.repo_id = undefined GROUP BY month ORDER BY month ASC

---
Let's think step by step, use best practice of writing SQL, generate a single line SQL (without line break) to answer the question: "How many contributors in @pingcap/tidb".
---
"
`;
