// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prompt template generate chart prompt template should work 1`] = `
"# TypeScript
interface Chart { title: string}
interface PieChart extends Chart {value: number}
interface LineChart  extends Chart {x: any;y: any;}
interface BarChart extends Chart  {x: any;y: any;}
interface MapChart extends Chart  {country_code: string;value: any;}
interface RepoCard extends Chart  {repo_id: number;repo_name: string;}
interface PersonalCard extends Chart  {repo_id: number;repo_name: string;}
# Example
Question: The star history of @pingcap/tidb
Data: [{event_month: "2015-09-01", repo_id: 41986369, total: 2541}]
Chart: 
{
  "title": "The Star History of @pingcap/tidb",
  "chartName": "LineChart",
  "x": "event_month",
  "y": "total"
}
# Example
Question: Geographic distribution of contributors to @pingcap/tidb  
Data: [{country_or_area: "CN", count: 8883, percentage: 0.5971}]
Chart: 
{
  "title": "The Geographic Distribution of Contributors to @pingcap/tidb ",
  "chartName": "MapChart",
  "country_code": "country_or_area",
  "value": "count"
}
# Example
Question: The open source projects similar to tidb?
Data:  [{repo_id: 41986369, repo_name: "pingcap/tidb"}, {repo_id: 48833910, repo_name: "tilv/tikv"}]
Chart: 
{
  "title": "The Repository List Similar to pingcap/tidb",
  "chartName": "RepoCard",
  "repo_id": "repo_id",
  "repo_name": "repo_name"
}
# Example
Question: Who has given the most stars on github?
Data:  [{id: 5086433, actor_login: "Mini256"}]
Chart: 
{
   "title": "The People Who Given the Most Stars on GitHub",
  "chartName": "PersonalCard",
  "id": "id",
  "login": "actor_login"
}
---
Question: The commits and pushes in @pingcap/tidb across months
Data: [{"commits":671,"event_month":"2015-09-01","pushes":521},{"commits":561,"event_month":"2015-10-01","pushes":426},{"commits":546,"event_month":"2015-11-01","pushes":399},{"commits":478,"event_month":"2015-12-01","pushes":343}]
Chart: 
"
`;

exports[`prompt template query playground prompt template should work 1`] = `
"# MySQL SQL
Table github_events, columns = [id, type, created_at, repo_id, repo_name, actor_id, actor_login, language, additions, deletions, action, number, org_login, org_id, state, closed_at, comments, pr_merged_at, pr_merged, pr_changed_files, pr_review_comments, pr_or_issue_id, push_size, push_distinct_size, creator_user_login, creator_user_id, pr_or_issue_created_at]
Column type, enums = ['PullRequestEvent', 'PushEvent', 'IssueCommentEvent', 'IssuesEvent', 'PullRequestReviewCommentEvent', 'WatchEvent', 'CreateEvent', 'DeleteEvent', 'ForkEvent', 'ReleaseEvent']When type = 'PullRequestReviewCommentEvent', the action could be 'created'
When type = 'PullRequestEvent' or type = 'IssuesEvent', the action could be 'opened', 'closed'
When type = 'PullRequestEvent', action = 'closed' and pr_merged = 1, it means the pull request is merged, and the creator_user_id is a contributor of the repo
Table github_repos, columns = [repo_id, repo_name, owner_id, owner_login, owner_is_org, description, primary_language, license, size, stars, forks, parent_repo_id, is_fork, is_archived, is_deleted, latest_released_at, pushed_at, created_at, updated_at]
Column primary_language, invalid = [null, '']
Table github_users, columns = [id, login, type, is_bot, name, organization, country_code, followers, followings, created_at, updated_at]
Column type, enums = ['USR', 'ORG']
Table collections, columns = [id, name]

Table collection_items, columns = [collection_id, repo_id, repo_name]

Table trending_repos, columns = [repo_name, created_at]

Table github_repo_topics, columns = [repo_id, topic]

Relation collections.id = collection_items.collection_id
Relation collection_items.repo_id = github_repos.repo_id
Relation trending_repos.repo_name = github_repos.repo_name
Relation github_events.repo_id = github_repos.repo_id
Relation github_repos.repo_id = github_repo_topics.repo_id
Relation github_events.actor_id = github_users.id
Relation github_events.creator_user_id = github_users.id
Relation github_repos.owner_id = github_users.id
Define my_user_id = 5086433
Define my_user_login = 'Mini256'
Select statement limit 20
---
-- Geographic distribution of contributors to @pingcap/tidb
SELECT gu.country_code, COUNT(DISTINCT ge.actor_login) AS contributors FROM github_events ge INNER JOIN github_users gu ON ge.actor_login = gu.login WHERE ge.repo_name = 'pingcap/tidb' AND ge.type = 'PullRequestEvent' AND ge.action = 'opened' AND gu.country_code NOT IN ('', 'N/A', 'UND') GROUP BY gu.country_code ORDER BY contributors DESC;
-- The most popular repos about ChatGPT
SELECT gr.repo_name, gr.stars AS popularity FROM github_repos gr WHERE gr.description LIKE '%ChatGPT%' ORDER BY popularity DESC;
-- The hottest open source projects recently
SELECT * FROM github_repos gr WHERE gr.repo_name IN (SELECT repo_name FROM trending_repos tr ORDER BY created_at DESC LIMIT 20) ORDER BY gr.stars DESC;
-- @pingcap/tidb cumulative stars across months
SELECT t_month, stars, SUM(stars) OVER(ORDER BY t_month ASC) AS cumulative_stars FROM ( SELECT DATE_FORMAT(created_at, '%Y-%m-01') AS t_month, COUNT(DISTINCT actor_login) AS stars FROM github_events ge WHERE ge.type = 'WatchEvent' AND ge.repo_id = (SELECT repo_id FROM github_repos WHERE repo_name = 'pingcap/tidb') GROUP BY t_month ) star_counts ORDER BY t_month ASC;
-- The open source projects similar to @pingcap/tidb
SELECT * FROM github_repos, ( SELECT repo_id, SUM(score) AS similarity FROM ( ( SELECT repo_id, 5 AS score FROM collection_items WHERE collection_id IN (SELECT collection_id FROM collection_items WHERE repo_name = 'pingcap/tidb') ) UNION ALL ( SELECT repo_id, 2 AS score FROM github_repo_topics WHERE topic IN ( SELECT topic FROM github_repo_topics WHERE repo_id = (SELECT repo_id FROM github_repos WHERE repo_name = 'pingcap/tidb') ) ) ) sub GROUP BY repo_id ORDER BY similarity DESC LIMIT 21 ) AS sub WHERE github_repos.repo_id = sub.repo_id AND repo_name != 'pingcap/tidb' ORDER BY similarity DESC LIMIT 20;
---
# Question:
# How many contributors in @pingcap/tidb
---

"
`;

exports[`prompt template sql playground prompt template should work 1`] = `
"# MySQL SQL
Table github_events, columns = [type, created_at, repo_id, repo_name, actor_id, actor_login, language, additions, deletions, action, number, org_login, org_id, state, closed_at, comments, pr_merged_at, pr_merged, pr_changed_files, pr_review_comments, pr_or_issue_id, push_size, push_distinct_size, creator_user_login, creator_user_id, pr_or_issue_created_at]
Column type, enums = ['PullRequestEvent', 'PushEvent', 'IssueCommentEvent', 'IssuesEvent', 'PullRequestReviewCommentEvent', 'WatchEvent', 'CreateEvent', 'DeleteEvent', 'ForkEvent', 'ReleaseEvent']
Table github_repos, columns = [repo_id, repo_name, owner_id, owner_login, owner_is_org, description, primary_language, license, size, stars, forks, parent_repo_id, is_fork, is_archived, is_deleted, latest_released_at, pushed_at, created_at, updated_at]

Relation github_events.repo_id = github_repos.repo_id
Define my_user_id = 5086433
Define my_user_login = 'Mini256'
Define this_repo_name = 'pingcap/tidb'
Define this_repo_id = 41986369

---
-- How many contributors in @pingcap/tidb
SELECT COUNT(DISTINCT creator_user_login) AS contributors FROM github_events WHERE repo_name = 'pingcap/tidb' AND type = 'PullRequestEvent' AND action = 'closed' AND pr_merged = true
-- Who am I
SELECT 'Mini256' AS user_login;
-- Am I a contributor to this repo
SELECT CASE sub.prs > 0 WHEN TRUE THEN 'Yes' ELSE 'No' END AS is_contributor FROM ( SELECT COUNT(*) AS prs FROM github_events WHERE type = 'PullRequestEvent' AND action = 'opened' AND repo_id = 41986369 AND actor_login = 'Mini256' ) AS sub;
---
# Question:
# How many contributors in @pingcap/tidb
---
SELECT 
"
`;
