import { Gap, Logo, PlaygroundBody, PlaygroundContainer, PlaygroundDescription, PlaygroundHeadline, PlaygroundMain, PlaygroundSide, PlaygroundTips, PlaygroundTipsText } from './styled';
import { Experimental } from '@site/src/components/Experimental';
import { Box, Button, useEventCallback } from '@mui/material';
import QuestionField from './QuestionField';
import PredefinedGroups from './PredefinedGroups';
import SQLEditor from './SQLEditor';
import { isNonemptyString, isNullish } from '@site/src/utils/value';
import LoadingButton from '@mui/lab/LoadingButton';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import ResultBlock from './ResultBlock';
import * as React from 'react';
import { useEffect, useMemo, useState } from 'react';
import { useAnalyzeContext } from '@site/src/dynamic-pages/analyze/charts/context';
import { PredefinedQuestion } from './predefined';
import { useAsyncOperation } from '@site/src/hooks/operation';
import { aiQuestion } from '@site/src/api/core';
import { format } from 'sql-formatter';
import { core } from '@site/src/api';
import { HelpOutline, Twitter, Favorite } from '@mui/icons-material';

const DEFAULT_QUESTION = 'Who closed the last issue in this repo?';
const QUESTION_MAX_LENGTH = 200;

export default function PlaygroundContent () {
  const { repoName, repoId } = useAnalyzeContext();

  const [inputValue, setInputValue] = useState('');
  const [customQuestion, setCustomQuestion] = useState('');

  const setCustomQuestionWithMaxLength = useEventCallback((value: string) => {
    setCustomQuestion(oldValue => value.length <= QUESTION_MAX_LENGTH ? value : oldValue);
  });

  const { data, loading, error, run } = useAsyncOperation({ sql: inputValue, type: 'repo', id: `${repoId ?? 'undefined'}` }, core.postPlaygroundSQL);
  const { data: questionSql, loading: questionLoading, error: questionError, run: runQuestion } = useAsyncOperation({ question: customQuestion || DEFAULT_QUESTION, context: { repo_id: repoId, repo_name: repoName } }, aiQuestion, true);

  const onChange = (newValue: string) => {
    setInputValue(newValue);
  };

  const handleFormatSQLClick = () => {
    const formattedSQL = format(inputValue, {
      language: 'mysql',
      uppercase: true,
      linesBetweenQueries: 2,
    });
    setInputValue(formattedSQL);
  };

  const handleSelectQuestion = useEventCallback((question: PredefinedQuestion) => {
    const trueSql = [
      { match: 'repoId', value: `${repoId ?? 'undefined'}` },
      { match: 'repoName', value: repoName ?? 'undefined' },
    ].reduce((sql, { match, value }) => sql.replaceAll(`{{${match}}}`, value), question.sql);
    setInputValue(trueSql);
    setCustomQuestion(question.title);
  });

  useEffect(() => {
    if (isNonemptyString(questionSql)) {
      setInputValue(format(questionSql, {
        language: 'mysql',
        uppercase: true,
        linesBetweenQueries: 2,
      }));
    }
  }, [questionSql]);

  const defaultInput = useMemo(() => {
    return `
/* ‚ö†Ô∏è 
Playground uses LIMITED resource(cpu/mem), so SQL should add:

WHERE repo_id = ${repoId ?? 'undefined'}

to use index as much as possible, or it will be terminated.


Example:

SELECT
*
FROM
github_events
WHERE
repo_id = ${repoId ?? '{{repoId}}'}
LIMIT
1;
*/
`;
  }, [repoId]);

  return (
    <PlaygroundContainer id="sql-playground-container">
      <PlaygroundHeadline>
        Playground: Customize your queries with SQL
        <Experimental feature="ai-playground">
          <> or AI<span className="opaque">ü§ñ</span>Ô∏è</>
        </Experimental>
        !
      </PlaygroundHeadline>
      <PlaygroundBody>
        <Experimental feature="ai-playground">
          <PlaygroundSide>
            <PlaygroundTips>
              <PlaygroundTipsText>
                1. Input Your Question
              </PlaygroundTipsText>
              <PredefinedGroups onSelectQuestion={handleSelectQuestion} />
            </PlaygroundTips>
            <QuestionField
              loading={questionLoading}
              error={questionError}
              value={customQuestion}
              onChange={setCustomQuestionWithMaxLength}
              onAction={runQuestion}
              defaultQuestion={DEFAULT_QUESTION}
              maxLength={QUESTION_MAX_LENGTH}
            />
            <PlaygroundDescription>
              <p>
                <HelpOutline fontSize='inherit' sx={{ verticalAlign: 'text-bottom' }} /> Disclaimer: All outputs are generated by AI. The output may be inaccurate due to imperfections in the model. You can edit the generated SQL statement as you like.
              </p>
              <p>
                <a>
                  &gt; Join our GitHub discussion üí¨
                </a>
                <br />
                <a>
                  &gt; Share on Twitter <Twitter fontSize='inherit' sx={{ verticalAlign: 'text-bottom' }} />
                </a>
              </p>
              <Box flex={1} />
              <p>
                Made with <Favorite fontSize='inherit' sx={{ verticalAlign: 'text-bottom' }} /> by <Logo height={20} src='/img/logo.png' alt='OSSInsight Logo'/> and <Logo height={16} src='/img/openai-logo.svg' alt='OpenAI Logo' />
              </p>
            </PlaygroundDescription>
          </PlaygroundSide>
        </Experimental>
        <PlaygroundMain>
            <PlaygroundTips>
              <Experimental
                feature="ai-playground"
                fallback={<PredefinedGroups onSelectQuestion={handleSelectQuestion} />}
              >
                <PlaygroundTipsText>
                  2. Check/Edit SQL
                </PlaygroundTipsText>
              </Experimental>
            </PlaygroundTips>
          <SQLEditor
            loading={questionLoading || loading}
            mode="sql"
            theme="twilight"
            onChange={onChange}
            name="SQL_PLAYGROUND"
            showPrintMargin={false}
            value={inputValue || defaultInput}
            fontSize={16}
            setOptions={{
              enableLiveAutocompletion: true,
            }}
            extra={
              <>
                <Button
                  variant="contained"
                  size="small"
                  disabled={!inputValue || isNullish(repoId)}
                  onClick={handleFormatSQLClick}
                >
                  Format
                </Button>
                <LoadingButton
                  variant="contained"
                  size="small"
                  disabled={!inputValue || isNullish(repoId)}
                  onClick={run}
                  endIcon={<PlayArrowIcon fontSize="inherit" />}
                  loading={loading}
                >
                  Run
                </LoadingButton>
              </>
            }
          />
          <Gap />
          <ResultBlock data={data} loading={loading} error={error} />
        </PlaygroundMain>
      </PlaygroundBody>
    </PlaygroundContainer>
  );
}
